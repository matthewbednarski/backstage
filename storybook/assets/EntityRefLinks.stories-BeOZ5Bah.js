import{R as p}from"./index-CTjT7uj6.js";import{E as m}from"./EntityRefLinks-B2d5k49o.js";import{e as s}from"./routes-pOmbUegn.js";import{w as n}from"./appWrappers-zuJY6Z2z.js";import"./EntityRefLink-DW6ddEHT.js";import"./Link-bsB8Po3b.js";import"./index-Cqve-NHl.js";import"./lodash-CoGan1YB.js";import"./index-QA7F3UF1.js";import"./index-DNAWfEOe.js";import"./ApiRef-BSBwTmJJ.js";import"./interopRequireDefault-Y9pwbXtE.js";import"./createSvgIcon-yIvaDIOA.js";import"./capitalize-DKydST9S.js";import"./defaultTheme-BLQVRFyP.js";import"./withStyles-K20mGrhL.js";import"./hoist-non-react-statics.cjs-yZcCaz5O.js";import"./useControlled-CogIeAPD.js";import"./createSvgIcon-DMq0di89.js";import"./isMuiElement-Cb6QZSLO.js";import"./unstable_useId-B3Hiq1YI.js";import"./makeStyles-DyV0dNcq.js";import"./useAnalytics-DTrkS1Gy.js";import"./ConfigApi-DBUUc3nU.js";import"./Typography-Drxa_JDy.js";import"./useRouteRef-D0BCYqYb.js";import"./EntityDisplayName-DR7klhje.js";import"./Box-CUgtRipO.js";import"./typography-CCicI0oZ.js";import"./Tooltip-DpHos2o3.js";import"./useTheme-DHQwi4PO.js";import"./Popper-DD91Ec3e.js";import"./Portal-DHXjgkAG.js";import"./Grow-C52yxNn8.js";import"./utils-DQjp17aO.js";import"./TransitionGroupContext-BtzQ-Cv7.js";import"./mapValues-r4uG88u0.js";import"./toString-C6iK1gA3.js";import"./ref-8pKZtiZi.js";import"./MockTranslationApi-WfPveaUo.js";import"./index-CFaqwFgm.js";import"./classCallCheck-BNzALLS0.js";import"./inherits-BlLXsrOw.js";import"./toArray-Bh10GYTQ.js";import"./TranslationApi-eOxINumg.js";import"./WebStorage-D5Fgivzj.js";import"./useAsync-CXA3qup_.js";import"./useMountedState-DkESzBh4.js";import"./componentData-CM4hSmEF.js";import"./ApiProvider-CuNQiN7Z.js";import"./index-BRV0Se7Z.js";import"./CssBaseline-gcFoYqiq.js";import"./ThemeProvider-CHb3fgCH.js";import"./jsx-runtime-Cw0GR0a5.js";import"./palettes-B20oCNII.js";const a={entityRefs:["component:default/playback","user:default/fname.lname"]},ft={title:"Catalog /EntityRefLinks",decorators:[r=>n(p.createElement(r,null),{mountedRoutes:{"/catalog/:namespace/:kind/:name":s}})]},t=r=>p.createElement(m,{...r});t.args=a;t.__docgenInfo={description:"",methods:[],displayName:"Default",props:{defaultKind:{required:!1,tsType:{name:"string"},description:""},entityRefs:{required:!0,tsType:{name:"Array",elements:[{name:"TRef"}],raw:"TRef[]"},description:""},hideIcons:{required:!1,tsType:{name:"boolean"},description:""},fetchEntities:{required:!1,tsType:{name:"boolean"},description:"@deprecated This option is no longer used; presentation is handled by entityPresentationApiRef instead"}}};var e,o,i;t.parameters={...t.parameters,docs:{...(e=t.parameters)==null?void 0:e.docs,source:{originalSource:"(args: EntityRefLinksProps<string | CompoundEntityRef>) => <EntityRefLinks {...args} />",...(i=(o=t.parameters)==null?void 0:o.docs)==null?void 0:i.source}}};const ct=["Default"];export{t as Default,ct as __namedExportsOrder,ft as default};
